# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-06-01 16:58
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('info', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseReaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reactionType', models.PositiveSmallIntegerField(default=0)),
                ('reactionCreatedAt', models.DateTimeField(auto_now_add=True)),
                ('reactionUpdatedAt', models.DateTimeField(auto_now=True)),
                ('reactedBaseProfile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ReactedBase', to='info.Baseprofile')),
                ('reactingUserProfile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='info.Userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='CommentBaseReaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reactionType', models.PositiveSmallIntegerField(default=0)),
                ('reactionCreatedAt', models.DateTimeField(auto_now_add=True)),
                ('reactionUpdatedAt', models.DateTimeField(auto_now=True)),
                ('reactedCommentBaseProfile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ReactedCommentBase', to='info.Commentbaseprofile')),
                ('reactingUserProfile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='info.Userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='CommentPostReaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reactionType', models.PositiveSmallIntegerField(default=0)),
                ('reactionCreatedAt', models.DateTimeField(auto_now_add=True)),
                ('reactionUpdatedAt', models.DateTimeField(auto_now=True)),
                ('reactedCommentPostProfile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ReactedCommentPost', to='info.Commentpostprofile')),
                ('reactingUserProfile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='info.Userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='CommentStashReaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reactionType', models.PositiveSmallIntegerField(default=0)),
                ('reactionCreatedAt', models.DateTimeField(auto_now_add=True)),
                ('reactionUpdatedAt', models.DateTimeField(auto_now=True)),
                ('reactedCommentStashProfile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ReactedCommentStash', to='info.Commentstashprofile')),
                ('reactingUserProfile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='info.Userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='PostReaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reactionType', models.PositiveSmallIntegerField(default=0)),
                ('reactionCreatedAt', models.DateTimeField(auto_now_add=True)),
                ('reactionUpdatedAt', models.DateTimeField(auto_now=True)),
                ('reactedPostProfile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ReactedPost', to='info.Postprofile')),
                ('reactingUserProfile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='info.Userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='StashReaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reactionType', models.PositiveSmallIntegerField(default=0)),
                ('reactionCreatedAt', models.DateTimeField(auto_now_add=True)),
                ('reactionUpdatedAt', models.DateTimeField(auto_now=True)),
                ('reactedStashProfile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ReactedStash', to='info.Stashprofile')),
                ('reactingUserProfile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='info.Userprofile')),
            ],
        ),
        migrations.AlterField(
            model_name='baseprocon',
            name='RelatedBaseProfile',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='RelatedBase', to='info.Baseprofile'),
        ),
        migrations.AlterUniqueTogether(
            name='stashreaction',
            unique_together=set([('reactingUserProfile', 'reactedStashProfile')]),
        ),
        migrations.AlterUniqueTogether(
            name='postreaction',
            unique_together=set([('reactingUserProfile', 'reactedPostProfile')]),
        ),
        migrations.AlterUniqueTogether(
            name='commentstashreaction',
            unique_together=set([('reactingUserProfile', 'reactedCommentStashProfile')]),
        ),
        migrations.AlterUniqueTogether(
            name='commentpostreaction',
            unique_together=set([('reactingUserProfile', 'reactedCommentPostProfile')]),
        ),
        migrations.AlterUniqueTogether(
            name='commentbasereaction',
            unique_together=set([('reactingUserProfile', 'reactedCommentBaseProfile')]),
        ),
        migrations.AlterUniqueTogether(
            name='basereaction',
            unique_together=set([('reactingUserProfile', 'reactedBaseProfile')]),
        ),
    ]
